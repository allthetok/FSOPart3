{"version":3,"sources":["components/Note.js","services/notes.js","components/Notification.js","App.js","index.js"],"names":["Note","note","toggleImportance","label","important","className","content","onClick","baseUrl","newObject","axios","post","then","response","data","id","put","Notification","message","Footer","style","color","fontStyle","fontSize","App","useState","notes","setNotes","newNote","setNewNote","showAll","setShowAll","errorMessage","setErrorMessage","useEffect","get","res","notesToShow","filter","map","find","n","changedNote","noteService","returnedNote","catch","error","setTimeout","toggleImportanceOf","onSubmit","event","preventDefault","noteObject","date","Date","toISOString","Math","random","concat","value","onChange","console","log","target","type","ReactDOM","render","document","getElementById"],"mappings":"4KAYeA,EAVF,SAAC,GAA8B,IAA7BC,EAA4B,EAA5BA,KAAMC,EAAsB,EAAtBA,iBACbC,EAAQF,EAAKG,UAAY,qBAAuB,iBAEpD,OACE,qBAAIC,UAAU,OAAd,UAAsBJ,EAAKK,QACvB,wBAAQC,QAASL,EAAjB,SAAoCC,Q,gBCNxCK,EAAU,wDAiBD,EAVA,SAAAC,GAEX,OADgBC,IAAMC,KAAKH,EAASC,GACrBG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SAQ9B,EALA,SAACC,EAAIN,GAEhB,OADgBC,IAAMM,IAAN,UAAaR,EAAb,YAAwBO,GAAMN,GAC/BG,MAAK,SAAAC,GAAQ,OAAIA,EAASC,SCD9BG,EAZM,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACnB,OAAgB,OAAZA,EACO,KAIP,qBAAKb,UAAU,QAAf,SACKa,KCFPC,EAAS,WAMb,OACE,sBAAKC,MANa,CAClBC,MAAO,QACPC,UAAW,SACXC,SAAU,IAGV,UACE,uBACA,2GAqFSC,EAjFH,WACV,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,IAAvC,mBAAOG,EAAP,KAAgBC,EAAhB,KACA,EAA8BJ,oBAAS,GAAvC,mBAAOK,EAAP,KAAgBC,EAAhB,KACA,EAAwCN,mBAAS,0BAAjD,mBAAOO,EAAP,KAAqBC,EAArB,KAEAC,qBAAU,WACRxB,IACGyB,IAAI,yDACJvB,MAAK,SAAAwB,GACJT,EAASS,EAAItB,WAEhB,IAEH,IAoBMuB,EAAcP,EAClBJ,EACAA,EAAMY,QAAO,SAAArC,GAAI,OAAIA,EAAKG,aAoB5B,OACE,gCACE,uCACA,cAAC,EAAD,CAAcc,QAASc,IACvB,8BACE,yBAAQzB,QAAS,kBAAMwB,GAAYD,IAAnC,kBACQA,EAAU,YAAc,WAGlC,6BACGO,EAAYE,KAAI,SAAAtC,GAAI,OACnB,cAAC,EAAD,CAAoBA,KAAMA,EAAMC,iBAAkB,kBA7B/B,SAACa,GAC1B,IAAMd,EAAOyB,EAAMc,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,KAAOA,KAChC2B,EAAW,2BAAOzC,GAAP,IAAaG,WAAYH,EAAKG,YAE/CuC,EAAmB5B,EAAI2B,GAAa9B,MAAK,SAAAgC,GACvCjB,EAASD,EAAMa,KAAI,SAAAtC,GAAI,OAAIA,EAAKc,KAAOA,EAAKd,EAAO2C,SAEpDC,OAAM,SAAAC,GACLb,EAAgB,SAAD,OACJhC,EAAKK,QADD,2CAGfyC,YAAW,WACTd,EAAgB,QACf,KACHN,EAASD,EAAMY,QAAO,SAAAG,GAAC,OAAIA,EAAE1B,KAAOA,SAewBiC,CAAmB/C,EAAKc,MAArEd,EAAKc,SAGpB,uBAAMkC,SAxDM,SAACC,GACfA,EAAMC,iBACN,IAAMC,EAAa,CACjB9C,QAASsB,EACTyB,MAAM,IAAIC,MAAOC,cACjBnD,UAAWoD,KAAKC,SAAW,IAG7Bd,EAAmBS,GAChBxC,MAAK,SAAAgC,GACJjB,EAASD,EAAMgC,OAAOd,IACtBf,EAAW,QA6Cb,UACE,uBAAO8B,MAAO/B,EACRgC,SA3Ca,SAACV,GACxBW,QAAQC,IAAIZ,EAAMa,OAAOJ,OACzB9B,EAAWqB,EAAMa,OAAOJ,UA2CpB,wBAAQK,KAAK,SAAb,qBAEF,cAAC,EAAD,Q,MC5FFC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.5caf84f4.chunk.js","sourcesContent":["import React from 'react';\n\nconst Note = ({note, toggleImportance}) => {\n  const label = note.important ? 'make not important' : 'make important';\n\n    return (\n      <li className='note'>{note.content}\n          <button onClick={toggleImportance}>{label}</button>\n      </li>\n    )\n  }\n\nexport default Note;","import axios from 'axios';\nconst baseUrl = 'https://murmuring-eyrie-59398.herokuapp.com/api/notes'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst create = newObject => {\n    const request = axios.post(baseUrl, newObject);\n    return request.then(response => response.data);\n}\n\nconst update = (id, newObject) => {\n    const request = axios.put(`${baseUrl}/${id}`, newObject);\n    return request.then(response => response.data)\n}\n\nexport default { getAll, create, update }","import React from 'react';\n\nconst Notification = ({message}) => {\n    if (message === null) {\n        return null;\n    }\n\n    return (\n        <div className=\"error\">\n            {message}\n        </div>\n    )\n}\n\nexport default Notification;","import React, {useState, useEffect} from 'react';\nimport Note from './components/Note';\nimport noteService from './services/notes';\nimport Notification from './components/Notification';\nimport axios from 'axios';\n\n\nconst Footer = () => {\n  const footerStyle = {\n    color: 'green',\n    fontStyle: 'italic',\n    fontSize: 16\n  }\n  return (\n    <div style={footerStyle}>\n      <br />\n      <em>Note app, Department of Computer Science, University of Helsinki 2021</em>\n    </div>\n  )\n}\nconst App = () => {\n  const [notes, setNotes] = useState([]);\n  const [newNote, setNewNote] = useState('');\n  const [showAll, setShowAll] = useState(true);\n  const [errorMessage, setErrorMessage] = useState('some error happened...')\n\n  useEffect(() => {\n    axios\n      .get('https://murmuring-eyrie-59398.herokuapp.com/api/notes')\n      .then(res => {\n        setNotes(res.data);\n      })\n  }, [])\n  \n  const addNote = (event) => {\n    event.preventDefault();\n    const noteObject = {\n      content: newNote,\n      date: new Date().toISOString(),\n      important: Math.random() > 0.5,\n    }\n\n    noteService.create(noteObject)\n      .then(returnedNote => {\n        setNotes(notes.concat(returnedNote));\n        setNewNote('');\n      })\n  }\n\n  const handleNoteChange = (event) => {\n    console.log(event.target.value);\n    setNewNote(event.target.value);\n  }\n\n  const notesToShow = showAll \n  ? notes\n  : notes.filter(note => note.important);\n\n  const toggleImportanceOf = (id) => {\n    const note = notes.find(n => n.id === id);\n    const changedNote = {...note, important: !note.important}\n\n    noteService.update(id, changedNote).then(returnedNote => {\n      setNotes(notes.map(note => note.id !== id ? note : returnedNote))\n    })\n    .catch(error => {\n      setErrorMessage(\n        `Note '${note.content}' was already removed from the server'`\n      )\n      setTimeout(() => {\n        setErrorMessage(null);\n      }, 5000)\n      setNotes(notes.filter(n => n.id !== id));\n    })\n  }\n\n  return (\n    <div>\n      <h1>Notes</h1>\n      <Notification message={errorMessage} />\n      <div>\n        <button onClick={() => setShowAll(!showAll)}>\n          show {showAll ? 'important' : 'all' }\n        </button>\n      </div>\n      <ul>\n        {notesToShow.map(note => \n          <Note key={note.id} note={note} toggleImportance={() => toggleImportanceOf(note.id)}/>\n        )}\n      </ul>\n      <form onSubmit={addNote}>\n        <input value={newNote}\n              onChange={handleNoteChange}\n        />\n        <button type=\"submit\">Save</button>\n      </form>\n      <Footer />\n    </div>\n  )\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport App from './App';\nimport './index.css';\n\n    ReactDOM.render(\n      <App />,\n      document.getElementById('root')\n  );  \n\n\n\n\n"],"sourceRoot":""}